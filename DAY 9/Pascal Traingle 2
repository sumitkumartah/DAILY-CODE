119. Pascal's Triangle II



BRUTE::


class Solution {
    public static int ncr(int n, int r) {
        long res = 1;
        for (int i = 0; i < r; i++) {
            res *= (n - i);
            res /= (i + 1);
        }
        return (int) res;
    }
    
    public List<Integer> getRow(int rowIndex) {
        List<Integer> ans = new ArrayList<>();
        
        ans.add(1); // First element of the row is always 1
        
        for (int col = 1; col <= rowIndex; col++) {
            ans.add(ncr(rowIndex, col));
        }
        
        return ans;
    }
}

Time Complexity: O(n*r), where n is the given row number, and r is the column index which can vary from 0 to n-1.
Reason: We are calculating the element for each column. Now, there are total n columns, and for each column, the calculation of the element takes O(r) time where r is the column index.

Space Complexity: O(1) as we are not using any extra space.



OPTIMAL::


class Solution {
   
    
    public List<Integer> getRow(int rowIndex) {
        long res=1;
        List<Integer> ans = new ArrayList<>();
        
        ans.add(1); // First element of the row is always 1
        
        for (int col = 1; col <= rowIndex; col++) {
             res *= (rowIndex - col+1);
            res /= col;
            ans.add((int)res);
        }
        
        return ans;
    }
}


Time complexity: O(N)
space Complexity: O(N)
