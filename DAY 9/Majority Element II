Majority Elements(>N/3 times) | Find the elements that appears more than N/3 times in the array



BRUTE FORCE::


lass Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        ArrayList<Integer> ls = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            if(ls.size()==0  || ls.get(0)!=nums[i])
            {
                int count=0;
                for(int j=0;j<n;j++)
                {
                    if(nums[j]==nums[i])
                    {
                        count++;
                    }
                }
                 if(count>n/3) ls.add(nums[i]);

            }
            if(ls.size()==2) break;
        }
       
        return ls;
        
    }
}



Time Complexity: O(N2), where N = size of the given array.
Reason: For every element of the array the inner loop runs for N times. And there are N elements in the array. So, the total time complexity is O(N2).

Space Complexity: O(1) as we are using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.




BETTER::


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;

        HashMap<Integer, Integer> mpp=new HashMap<>();
        ArrayList<Integer> ls=new ArrayList<>();
        int min=(int)(n/3)+1;
        for(int i=0;i<n;i++)
        { 
            
            int value=mpp.getOrDefault(nums[i],0);
            mpp.put(nums[i],value+1);
            if(mpp.get(nums[i])==min)
            {
                ls.add(nums[i]);

            }
            if(ls.size()==2)break;
            
        }
        return ls;

    }
}

Time Complexity: O(N*logN), where N = size of the given array.
Reason: We are using a map data structure. Insertion in the map takes logN time. And we are doing it for N elements. So, it results in the first term O(N*logN).
If we use unordered_map instead, the first term will be O(N) for the best and average case and for the worst case, it will be O(N2).

Space Complexity: O(N) as we are using a map data structure. We are also using a list that stores a maximum of 2 elements. That space used is so small that it can be considered constant.





OPTIMAL::


class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
       
        int el1=Integer.MIN_VALUE;
        int el2=Integer.MIN_VALUE;
        int cnt1=0;
        int cnt2=0;
        for(int i=0;i<n;i++)
        {
            if(cnt1==0 && nums[i]!=el2)
            {
                cnt1=1;
                el1=nums[i];
            }
            else if(cnt2==0 && nums[i]!=el1)
            {
                cnt2=1;
                el2=nums[i];
            }
            else if(nums[i]==el1)cnt1++;
            else if (nums[i]==el2) cnt2++;
            else
            {
                cnt1--; cnt2--;
            }
            

        }
        ArrayList<Integer> ls=new ArrayList<>();
        cnt1 = 0; cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == el1) cnt1++;
            if (nums[i] == el2) cnt2++;
        }
        int mini = (int)(n / 3) + 1;
        if (cnt1 >= mini) ls.add(el1);
        if (cnt2 >= mini) ls.add(el2);
        
        return ls;
        
        
    }
}

Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.

Space Complexity: O(1) as we are only using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.


