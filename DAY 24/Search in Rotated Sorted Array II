33. Search in Rotated Sorted Array


BRUTE::

class Solution {
    public boolean search(int[] nums, int target) {
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==target) return true;
        }
        return false;
    }
}

Time Complexity: O(N), N = size of the given array.
Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).


OPTIMAL::


class Solution {
    public boolean search(int[] nums, int target) {
      int n=nums.length;
        int low=0;
        int high=n-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[mid]==target) return true;
            
             // Handle the case when there are duplicate elements at the beginning or end
            if(nums[low]==nums[mid] && nums[mid]==nums[high])
            {
                low++;
                high--;
                continue;
            }

            //if left part is sorted
            if(nums[low]<=nums[mid])
            {
                if(nums[low]<=target && target <=nums[mid]) //element within the left portion
                {
                    high=mid-1;
                }
                else  //element is not in the left portion then eleminate the left portion
                {
                    low=mid+1;
                }
            }

            //if right part is sorted

            if(nums[mid]<=nums[high])
            {
                if(nums[mid]<=target && target <=nums[high]) //element within the left portion
                {
                    low=mid+1;
                }
                else//element is not in the right portion then eleminate the right portion
                {
                    high=mid-1;
                }
            }
        }
        return false;  
    }
}


Time Complexity: O(logN) for the best and average case. O(N/2) for the worst case. Here, N = size of the given array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).
