33. Search in Rotated Sorted Array


BRUTE::


class Solution {
    public int search(int[] nums, int target) {
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
}


Time Complexity:Time Complexity: O(N), N = size of the given array.
Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).



OPTIMAL::

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int l = 0;
        int h = n - 1;
        
        while (l <= h) {
            int mid = (l + h) / 2;

            if (nums[mid] == target)
                return mid;

            // Check if the first half is sorted
            if (nums[l] <= nums[mid]) {
                // Check if the target is in the left half
                if (nums[l] > target || target > nums[mid]) {  //if target is less than nums[low] or
                                                              // target is greater than nums[mid]
                    l = mid + 1;
                   
                } else {
                     h = mid - 1;
                }
            }
            // If the second half is sorted
            else {
                // Check if the target is in the right half
                if (nums[mid] > target || target> nums[h]) {  //if target is less than nums[mid] or
                                                              // target is greater than nums[high] 
                    h = mid - 1;
                    
                } else {
                    l = mid + 1;
                }
            }
        }
        
        return -1;
    }
}


Time Complexity: O(logN), N = size of the given array.
Reason: We are using binary search to search the target.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).

