Given an array of size “N”; find the shortest subarray such that the sum of first and element of the subarray is “k” (Subarray should at least be of size>=2)
(AMAZON OA)




// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;

class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the target: ");
        int t = sc.nextInt();

        System.out.println("Length of the subarray with min lengthwhich first el + last el = target : " + minSubarray(arr, n, t));
    }

    public static int minSubarray(int arr[], int n , int target)
    {
       int ans=Integer.MAX_VALUE;
        for(int i=0;i<n-1;i++)
        {
          
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]+ arr[j]==target)
                {
                    
                    ans=Math.min(ans, j-i+1);
                }
            }
        }
        return ans;
    }
    
}



TC=O(N^2)
SC=O(1)







OPTIMAL:::

import java.util.*;

class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the target: ");
        int t = sc.nextInt();

        System.out.println("Length of the subarray with min lengthwhich first el + last el = target : " + minSubarray(arr, n, t));
    }

    public static int minSubarray(int arr[], int n , int target)
    {
       HashMap<Integer, Integer> mpp=new HashMap<>();
       int ans=Integer.MAX_VALUE;
       
       for(int i=0;i<n;i++)
       {
           int req=target-arr[i];
           
           if(mpp.containsKey(req))
           {
               ans=Math.min(ans, i-mpp.get(req) +1 );
           }
           mpp.put(arr[i], i);
       }
       return ans;
    }
    
}



TC=O(N)
SC=O(N)



_____________________________________________________________________________________________________________________________________________________________________



FOLLOW up question 
find the shortest subarray such that the sum of first and element of the subarray is “k” (Subarray should at least be of size>=2)




import java.util.*;

class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the target: ");
        int t = sc.nextInt();

        System.out.println("Length of the subarray with min lengthwhich first el + last el = target : " + maxSubarray(arr, n, t));
    }

    public static int maxSubarray(int arr[], int n , int target)
    {
       HashMap<Integer, Integer> mpp=new HashMap<>();
       int ans=Integer.MIN_VALUE;
       
       for(int i=0;i<n;i++)
       {
           int req=target-arr[i];
           
           if(mpp.containsKey(req))
           {
               ans=Math.max(ans, i-mpp.get(req) +1 );
           }else{
           mpp.put(arr[i], i);
           }
       }
       return ans;
    }
    
}



TC=O(N)
SC=O(N)



Enter the size of the array : 6
Enter the elements of the array : 4 3 7 5 2 3
Enter the target: 7
Length of the subarray with max length which first el + last el = target : 6

=== Code Execution Successful ===


