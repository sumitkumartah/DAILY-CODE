Given an array of size “N”; find the number of quadruplets; such that A[i] > A[j] < A[k] >A[l] such that i < j < k < l ;   (GOOGLE OA)




___________________________________________________________________________________________________________________________________________________________________
Problem.-> Given an array of size “N”; find the number of triplets; such that A[i] >A[j]< A[k] such that i < j < k ; 



CODE::
import java.util.*;
class A
{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n=sc.nextInt();
        System.out.print("Enter the elemnts of the array : ");
        int arr[]=new int[n+1];
        for(int i=1;i<=n;i++){
            arr[i]=sc.nextInt();
        }
        
        System.out.println("NO of triplets which satisfy a[i] > a[j] <a[k]  = "+ solve(arr, n));
        
     }
     
     public static int solve(int arr[], int n)
     {
         int cnt=0;
         for(int i=1;i<=n;i++)
         {
             for(int j=i+1;j<=n;j++)
             {
                 for(int k=j+1;k<=n;k++)
                 {
                     if(arr[i]>arr[j] && arr[j]<arr[k])
                     {
                         cnt++;
                     }
                 }
             }
         }
         return cnt;
     }
}


TC=O(N^3)









OPTIMIZATION::::::::::::::



import java.util.*;
class A
{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n=sc.nextInt();
        System.out.print("Enter the elemnts of the array : ");
        int arr[]=new int[n+1];
        for(int i=1;i<=n;i++){
            arr[i]=sc.nextInt();
        }
        
        System.out.println("NO of triplets which satisfy a[i] > a[j] <a[k]  = "+ solve(arr, n));
        
     }
     
     public static int solve(int arr[], int n)
     {
        //FOR THE PREFIX[J]  ---> CNT THE NUMBER OF  PAIRS WHICH SATISFY CONDITION A[I]>=A[J]  
            int prefix[]=new int[n+1];
            prefix[1]=0;
            
            int j=2;
            while(j<=n)
            {
                int cnt=0;
                int i=1;
                while(i<=j-1)
                {
                    if(arr[i]>arr[j]) cnt++;
                    i++;
                }
                prefix[j]=cnt;
                j++;
            }
            
            
            
        //FOR THE SUFFIX[J]----------->   CNT THE NUMMBER OF PAIRS WHICH SATISFY THE CONDITION A[J]<A[K]  
        
        int suffix[]=new int [n+1];
        suffix[n]=0;
         j=n-1;
        while(j>=1)
        {
            int cnt=0;
            int k=j+1;
            while(k<=n)
            {
                if(arr[j]<arr[k])
                {
                    cnt++;
                }
                k++;
            }
            suffix[j]=cnt;
            j--;
        }
        
        
        //check how many  triplets can abailabe whilch satisfy a[i]>a[j]<a[k]
        
        j=1;
        int cnt=0;
        while(j<=n)
        {
            cnt=cnt+prefix[j]*suffix[j];
            j++;
        }
        
        return cnt;
     }
}




Enter the size of the array : 5
Enter the elemnts of the array : 1 2 1 5 5
NO of triplets which satisfy a[i] > a[j] <a[k]  = 2

=== Code Execution Successful ===




TC= O(N^2)
Sc=O(2N)


______________________________________________________________________________________________________________________________________________________________________




____________________________________________________________________________________________________________________________________________________________________






SIMILAR  FOLLOW UP  QUESTION ASKED IN GOOGLE:::::::::::::::::::::::::::::::::::::::::::::::



Given an array of size “N”; find the number of quadruplets; such that A[i] > A[j] < A[k] >A[l] such that i < j < k < l ; 







import java.util.*;
class A
{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the size of the array : ");
        int n=sc.nextInt();
        System.out.print("Enter the elemnts of the array : ");
        int arr[]=new int[n+1];
        for(int i=1;i<=n;i++){
            arr[i]=sc.nextInt();
        }
        
        System.out.println("NO of triplets which satisfy a[i] > a[j] <a[k] > a[l] = "+ solve(arr, n));
        
     }
     
     public static int solve(int arr[], int n)
     {
        //FOR THE PREFIX[J]  ---> CNT THE NUMBER OF  PAIRS WHICH SATISFY CONDITION A[I]>=A[J]  
            int prefix[]=new int[n+1];
            prefix[1]=0;
            
            int j=2;
            while(j<=n)
            {
                int cnt=0;
                int i=1;
                while(i<=j-1)
                {
                    if(arr[i]>arr[j]) cnt++;
                    i++;
                }
                prefix[j]=cnt;
                j++;
            }
            
            
            
        //FOR THE SUFFIX[J]----------->   CNT THE NUMMBER OF PAIRS WHICH SATISFY THE CONDITION A[J]<A[K]  
        
        int suffix[]=new int [n+1];
        suffix[n]=0;
        int k=n-1;
        while(k>=1)
        {
            int cnt=0;
            int l=k+1;
            while(l<=n)
            {
                if(arr[l]<arr[k])
                {
                    cnt++;
                }
                l++;
            }
            suffix[k]=cnt;
            k--;
        }
        
        
        
        
        
        //check how many  quadples  can abailabe whilch satisfy a[i]>a[j]<a[k]>a[k]
        
       int result = 0;
        j = 1;
 
        while (j <= n) {
             k = j + 1;
            while (k<= n) {
                if (arr[j] < arr[k]) {
                    result = result + prefix[j] * suffix[k];
                }
                k++;
            }
            j++;
        }
        return result;
}
}




Enter the size of the array : 6
Enter the elemnts of the array : 1 2 1 5 1 34 35
NO of triplets which satisfy a[i] > a[j] <a[k] > a[l] = 1

=== Code Execution Successful ===





TC=   O(N^2)

SC= O(2*N)->O(N).


