2485. Find the Pivot Integer


CODE::

MATH>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class Solution {
    public int pivotInteger(int n) {
        int sum=n*(n+1)/2;
        int pivot=(int)Math.sqrt(sum);

        if(pivot * pivot==sum){
            return pivot;
        }
        else 
        return -1;

    }
}

TC=O(N)
SC=O(1)


class Solution {
    public int pivotInteger(int n) {
        int sum=n*(n+1)/2;

        for(int i=1;i<=n;i++){
            if(i*i ==sum){
                return i;
            }
        }
        return -1;
    }
}


Prefix sum::>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
    public int pivotInteger(int n) {
        int left[] = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            if (i > 1)
                left[i] += left[i - 1] + i;
            else
                left[i] = 1;
        }

        int right[] = new int[n + 1];
        for (int i = n; i >= 0; i--) {
            if (i < n)
                right[i] = right[i + 1] + i;
            else
                right[i] = n;
        }
        for(int i=1;i<=n;i++){
            if(left[i]==right[i]){
                return i;
            }
        }
        return -1;
    }
}
// TC: O(3 * n) => O(n)
// SC: O(2 * n) => O(n)


with less space:


class Solution {
    public int pivotInteger(int n) {
        int sum=n*(n+1)/2;
         
         int newsum=0;
        for(int i=1;i<=n;i++){
            newsum+=i;
            int req=sum-newsum + i;
            if(newsum==req) return i;
        }
        return -1;
    }
}
TC=O(N)
Sc=O(1)



