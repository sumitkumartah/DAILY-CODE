
BY using matrix ::




import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter the number of nodes: ");
        int n=sc.nextInt();
        
         System.out.print("Enter the number of edges: ");
        int m=sc.nextInt();
          int[][] b = new int[n][n]; 
         System.out.println("Enter the edges which are conncted: ");
         for(int i=0;i<m;i++){
             int x=sc.nextInt();
             int y=sc.nextInt();
             //it is a undirected graph
             b[x][y]=1;
             b[y][x]=1;
         }
        
        for(int i=0;i<n;i++){
            int cnt=0;
            for(int j=0;j<n;j++){
                if(b[i][j]==1) cnt++;
            }
            System.out.printf("Node %d = %d",i ,cnt);
        }
    }
}



Time Complexity: O(m + n^2)
Therefore, the overall time complexity of your code is O(n^2 + m), where n is the number of nodes and m is the number of edges. 
Since both n and m are inputs to the program, we usually represent the time complexity as O(N), where N = max(n, m).
Space Complexity: O(n^2)








BY USING ADJENCY LIST>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of nodes: ");
        int n = sc.nextInt();

        System.out.print("Enter the number of edges: ");
        int m = sc.nextInt();

        // Create adjacency list
        ArrayList<Integer>[] adjList = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adjList[i] = new ArrayList<Integer>();
        }

        System.out.println("Enter the edges which are connected: ");
        for (int i = 0; i < m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            // it is an undirected graph
            adjList[x].add(y);
            adjList[y].add(x);
        }

        for (int i = 0; i < n; i++) {
            int cnt = adjList[i].size();
            System.out.printf("Node %d = %d\n", i, cnt);
        }
    }
}



Enter the no of Nodes :  6
Enter the no of Edges :  5
Enter the edges which are conncted: 
0 1
1 5
1 2
3 2
4 2
Node 0 = 2
Node 1 = 2
Node 2 = 2
Node 3 = 2
Node 4 = 2
Node 5 = 0

=== Code Execution Successful ===

NEW TYPE:::::::::

import java.util.*;
class A{
    public static void main(String args[])
    {
        Scanner sc=new Scanner (System.in);
        System.out.print("Enter the no of Nodes :  ");
        int n=sc.nextInt();
        System.out.print("Enter the no of Edges :  ");
        int m=sc.nextInt();
       List<List<Integer>> g = new ArrayList<> ();
        for (int i = 0; i < n; i++) {
               g.add(new ArrayList<Integer>());
        }

        System.out.println("Enter the edges which are conncted: ");
       for(int i=0;i<m;i++)
       {
           int x=sc.nextInt();
           int y=sc.nextInt();
           g.get(i).add(y);
           g.get(i).add(x);
       }
       
       
       for(int i=0;i<n;i++)
       {
           
               int cnt=g.get(i).size();
               System.out.println("Node "+i+ " = "+cnt);
         
       }
    }
}


