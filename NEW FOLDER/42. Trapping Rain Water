
42. Trapping Rain Water


class Solution {
    public int trap(int[] height) {
        int n=height.length;

        int pref[]=new int[n];
        pref[0]=height[0];
        for(int left=1;left<n; left++)
        {
            pref[left]= Math.max(height[left], pref[left-1]);
        }


        int suf[]=new int[n];
        suf[n-1]=height[n-1];
        for(int right=n-2;right>=0;right--)
        {
            suf[right]= Math.max(height[right], suf[right+1]);
        }


        int water=0;
        for(int i=0;i<n;i++)
        {
            water+=Math.min(pref[i],suf[i]) - height[i];
        }
        return water;

    }
}


TC=O(3N) ~O(N)
SC=O(2N) ~ O(N)



optimal::

class Solution {
    public int trap(int[] height) {
        int n=height.length;

       


        int suf[]=new int[n];
        suf[n-1]=height[n-1];
        for(int right=n-2;right>=0;right--)
        {
            suf[right]= Math.max(height[right], suf[right+1]);
        }


        int water=0;
        int pref=0;
        for(int i=0;i<n;i++)
        {
            pref=Math.max(pref, height[i]);
            water+=Math.min(pref,suf[i]) - height[i];
        }
        return water;

    }
}

TC=O(2N) ~  O(N)
SC=O(N)




