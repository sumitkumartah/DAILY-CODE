
BFS ON GRAPH


CODE::

import java.util.*; // Importing java.util package

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); // Declaring Scanner object to take input
         System.out.print("Enter the no of nodes: ");
        int n = sc.nextInt(); // Taking input of size of graph
        System.out.print("Enter the no of edges: ");
        int m = sc.nextInt(); // Taking input of number of edges in the graph

        List<Integer>[] G = new ArrayList[n + 5]; // Constructing graph using adjacency list

        // Creating n number of vertices in the graph
        for (int i = 0; i < n + 5; i++) {
            G[i] = new ArrayList<>();
        }

       
        // Reading edges of the graph
        for (int i = 1; i <= m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            G[x].add(y);
            G[y].add(x);
            // Making the graph undirected
        }

        int source = 1; // Setting the source node

        int[] used = new int[n + 5]; // Declaring an empty used array where used[i] = 0 means this node has not yet been visited in our algorithm
        int[] level = new int[n + 5]; // Declaring level array which lets us know the level of each node

        Queue<Integer> q = new LinkedList<>(); // Declaring a queue

        q.add(source); // Pushing the source node into the queue
        used[source] = 1; // Marking the source node as visited
        level[source] = 0; // Setting the level of the source node to 0
         System.out.println("node  level");
        while (!q.isEmpty()) {
            // BFS Algorithm

            int removed = q.poll(); // Getting the top-most element of the queue

            System.out.println(removed + "      " + level[removed]); // Printing the node with its level

            for (int i = 0; i < G[removed].size(); i++) {
                // Iterating through all nodes connected to the removed node
                int u = G[removed].get(i);
                if (used[u] == 0) { // Checking if the node has never been visited before
                    // If the node u (node connected to removed) has never been visited before, then let's visit it
                    q.add(u);
                    used[u] = 1; // Marking the node as visited
                    level[u] = level[removed] + 1; // Setting the level of the node
                }
            }
        }
    }
}

Enter no of Nodes: 8
Enter no of Edges: 8
Enter the nodes which are connercted :  
1 5
1 3
3 6
6 9
6 4
4 1
10 2
2 1
Node  level
1      0
5      1
3      1
4      1
2      1
6      2
10      2
9      3




Time Complexity: O(n + m)
Space Complexity: O(n + m)





HACKEREARTH PROBLEM::::    link- https://www.hackerearth.com/problem/algorithm/shortest-distance-from-source/?purpose=login&source=problem-page&update=google   
Here [] v  and int[] dist  array take in as class arraylist or array -------and here we have to print the level starting from 0 thats why i use another loop in main method
import java.util.*;

public class Main {
    static ArrayList<Integer>[] v;
    static int[] dist;

    static void bfs(int s, int n) {
        boolean[] vis = new boolean[n + 5];
         dist = new int[n + 5];
        Queue<Integer> q = new LinkedList<>();

        q.add(s);
        vis[s] = true;
        dist[s] = 0;

        while (!q.isEmpty()) {
            int u = q.poll();
            for (int i = 0; i < v[u].size(); i++) {
                int neighbor = v[u].get(i);
                if (!vis[neighbor]) {
                    q.add(neighbor);
                    vis[neighbor] = true;
                    dist[neighbor] = dist[u] + 1;
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt(); // number of nodes
        int e = scanner.nextInt(); // number of edges

        v = new ArrayList[n + 5];
        for (int i = 0; i < n+5; i++) {
            v[i] = new ArrayList<>();
        }

        for (int i = 0; i < e; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            v[x].add(y);
            v[y].add(x);
        }

        int s = scanner.nextInt(); // source node

       
        bfs(s, n);

        for (int i = 1; i <= n; i++) {
            System.out.print(dist[i] + " ");    // here we have to print the level starting from 0 thats why i use another loop in main method
        }
        System.out.println();

    }
}




Input
5 4
1 2
2 3
2 4
3 5
2

Output   
1 0 1 1 2 




