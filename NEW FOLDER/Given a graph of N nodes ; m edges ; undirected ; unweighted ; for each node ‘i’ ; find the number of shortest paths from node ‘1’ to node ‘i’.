

Given a graph of N nodes ; m edges ; undirected ; unweighted ; for each node ‘i’ ; find the number of shortest paths from node ‘1’ to node ‘i’.



CODE::

import java.util.*; 

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); 
         System.out.print("Enter the no of nodes: ");
        int n = sc.nextInt(); 
        System.out.print("Enter the no of edges: ");
        int m = sc.nextInt(); 

        List<Integer>[] G = new ArrayList[n + 5]; 

       
        for (int i = 0; i < n + 5; i++) {
            G[i] = new ArrayList<>();
        }

       
       
        for (int i = 1; i <= m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            G[x].add(y);
            G[y].add(x);
           
        }

        int source = 1; 

        int[] used = new int[n + 5]; 
        int[] level = new int[n + 5]; 
        int [] ways=new int[n+5];

        Queue<Integer> q = new LinkedList<>(); 

        q.add(source); 
        used[source] = 1; 
        level[source] = 0;
        ways[source]=1;
         System.out.println("node ways");
        while (!q.isEmpty()) {
            
            int removed = q.poll(); 

            System.out.println(removed + "    " + ways[removed]);

            for (int i = 0; i < G[removed].size(); i++) {
               
                int u = G[removed].get(i);
        
                if (used[u] == 0) { 
                    //it means that there is a guarantee that this node is being visited for the first time and it is on the shortest path hence ways[u] = ways[remove] 

                    q.add(u);
                    used[u] = 1;
                     ways[u]=ways[removed];
                    level[u] = level[removed] + 1; 
                }
                else{
                   //it means this node u is visited before 
                    if( level[removed]+1==level[u])
                    {
                        //either the node u is the same level as previously level 
                        ways[u]=ways[u]+ways[removed];
                    }
                }
            }
        }
    }
}



Enter the no of nodes: 6
Enter the no of edges: 6
1 2
2 4
4 6
6 5
5 3
3 1
node ways
1    1
2    1
3    1
4    1
5    1
6    2

=== Code Execution Successful ===









BY using function--------------------------------------------------------------


import java.util.*; 

public class Main {
    static ArrayList<Integer> G[];
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); 
         System.out.print("Enter the no of nodes: ");
        int n = sc.nextInt(); 
        System.out.print("Enter the no of edges: ");
        int m = sc.nextInt(); 

        G = new ArrayList[n + 5]; 

       
        for (int i = 0; i < n + 5; i++) {
            G[i] = new ArrayList<>();
        }

       
       
        for (int i = 1; i <= m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            G[x].add(y);
            G[y].add(x);
           
        }

        int source = 1; 

         bfs(n, source);
        }
        
       static  void bfs(int n, int source)
        {
         int[] used = new int[n + 5]; 
        int[] level = new int[n + 5]; 
        int [] ways=new int[n+5];

        Queue<Integer> q = new LinkedList<>(); 

        q.add(source); 
        used[source] = 1; 
        level[source] = 0;
        ways[source]=1;
         System.out.println("node ways");
        while (!q.isEmpty()) {
            
            int removed = q.poll(); 

            System.out.println(removed + "    " + ways[removed]);

            for (int i = 0; i < G[removed].size(); i++) {
               
                int u = G[removed].get(i);
        
                if (used[u] == 0) { 
                    //it means that there is a guarantee that this node is being visited for the first time and it is on the shortest path hence ways[u] = ways[remove] 

                    q.add(u);
                    used[u] = 1;
                     ways[u]=ways[removed];
                    level[u] = level[removed] + 1; 
                }
                else{
                    if( level[removed]+1==level[u])
                    {
                        //either the node u is the same level as previously level 
                        ways[u]=ways[u]+ways[removed];
                    }
                }
            }
        }
    }
}


Enter the no of nodes: 6
Enter the no of edges: 6
1 2
2 4
4 6
6 5
5 3
3 1
node ways
1    1
2    1
3    1
4    1
5    1
6    2

=== Code Execution Successful ===

