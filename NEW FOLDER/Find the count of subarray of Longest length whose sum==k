


 Find the count of subarray of Longest length whose sum==k





BRUTE FORCE :    (  Find the subarray of Longest length whose sum==k)

import java.util.*;

class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the K : ");
        int k = sc.nextInt();

        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int ans = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            int min = Integer.MAX_VALUE; // Reset min for each new starting point
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr[j];
                if (sum == k) {
                    min = (j - i) + 1;
                    break; // Since we are looking for minimum length, we can exit early
                }
            }

             ans = Math.min(ans, min);
            
        }
        if (ans == Integer.MAX_VALUE) {
            System.out.println("No subarray found with sum equal to " + k);
        } else {
            System.out.println("Maximum length of subarray with sum equal to " + k + " is " + ans);
        }
    }
}



TC=O(N^2)
SC=O(1)











OPTIMAL (By using hashing):::


import java.util.*;

class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the K : ");
        int k = sc.nextInt();

        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

       Map<Integer, Integer> mpp=new HashMap<>();
       int ans=Integer.MIN_VALUE;
       int sum=0;
       for(int i=0;i< n;i++)
       {
           sum+=arr[i];
           if(sum==k)
           {
               ans=Math.max(ans, i+1);
           }
           
           int req=sum-k;
           
           if(mpp.containsKey(req))
           {
               ans=Math.max(ans, i-mpp.get(req));
           }
           
           
            if (!mpp.containsKey(sum)) {
               mpp.put(sum, i);
           }
           
       }
        if (ans == Integer.MIN_VALUE) {
            System.out.println("No subarray found with sum equal to " + k);
        } else {
            System.out.println("Maximum length of subarray with sum equal to " + k + " is " + ans);
        }
    }
}

Enter the K : 15
Enter the size of the array : 8
Enter the elements of the array : 10 5 2 7 1 9 8 7
Maximum length of subarray with sum equal to 15 is 4









TC=O(N)
SC=O(N)



____________________________________________________________________________________________________________________________________________________________________



Q. Find the count of subarray of longest length whose sum==k
A = {10,5,2,7,1,9,8,7}   k = 15

O/p: 1

Eg. subarrays having sum =15 , {10,5} , {5,2,7,1} , {8,7}
Longest length is 4 


And there is only 1 such subarray present in the array A. {5,2,7,1}
so ans =  1






import java.util.*;
class A {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the K : ");
        int k = sc.nextInt();

        System.out.print("Enter the size of the array : ");
        int n = sc.nextInt();
        System.out.print("Enter the elements of the array : ");
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

       Map<Integer, Integer> mpp=new HashMap<>();
       int ans=Integer.MIN_VALUE;
       int sum=0;
       for(int i=0;i< n;i++)
       {
           sum+=arr[i];
           if(sum==k)
           {
               ans=Math.max(ans, i+1);
           }
           
           int req=sum-k;
           
           if(mpp.containsKey(req))
           {
               ans=Math.max(ans, i-mpp.get(req));
           }
           
           
            if (!mpp.containsKey(sum)) {
               mpp.put(sum, i);
           }
           
       }
        
        System.out.println("NO of subarrays with min length and sum is k are =   " + solve(arr, ans, k)   );
    }
    
    
    
    public static int solve(int arr[], int minlen,  int k)
    {
       int i=0;
       int j=0;
       int cnt=0;
       int sum =0;
       while(j<arr.length)
       {
           sum+=arr[j];
           
           if(j-i+1 <minlen)
           {
               j++;
           }
           else if(j-i+1==minlen)
           {
               if(sum==k) cnt++;
               sum-=arr[i];
               
               i++;
               j++;
           }
       }
       
       
       return cnt;
    }
}






The main part of the time complexity comes from the loop that iterates through the array once. This loop has a time complexity of O(n), where n is the size of the input array.
The solve function also iterates through the array once using two pointers i and j, which takes O(n) time.
Therefore, the overall time complexity of the algorithm is O(n).
Space Complexity:

The space complexity primarily depends on the HashMap mpp, which stores at most 'n' entries, where 'n' is the size of the input array.
Therefore, the space complexity of the algorithm is O(n).
In summary:

Time Complexity: O(n)
Space Complexity: O(n)







