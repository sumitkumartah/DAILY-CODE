1. Two Sum


BRUTE FORCE>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
         ans[0]=ans[1]=1;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    ans[0]=i;
                    ans[1]=j;
                }
            }
        }
        return ans;
    }
}

TC=O(N^2)
SC=O(1)




OPTIMAL>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> mpp=new HashMap<>();

        for(int i=0;i<nums.length; i++)
        {
            int require=target-nums[i];  // find require
           if(mpp.containsKey(require)){  //check if rewuire is in the map
                return new int[]{i, mpp.get(require)};
            }
            mpp.put(nums[i], i);
            
        }
        return new int[]{0, 0};
    }
}


TC=O(N)
SC=O(N)
