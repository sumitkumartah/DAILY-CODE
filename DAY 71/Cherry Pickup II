1463. Cherry Pickup II

 
MEMOIZATION::
class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
    
        int[][][] dp = new int[n][m][m];
        for (int[][] row1 : dp) {
            for (int[] row2 : row1) {
                Arrays.fill(row2, -1);
            }
        }
        return memoizationUtil(0, 0, m - 1, n, m, grid, dp);
    }

    static int memoizationUtil(int i, int j1, int j2, int n, int m, int[][] grid, int[][][] dp) {
        // Check if j1 and j2 are valid column indices
        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return (int) (Math.pow(-10, 9));
        }

        // If we are at the last row, return the sum of cherry in the selected columns
        if (i == n - 1) {
            if (j1 == j2)
                return grid[i][j1];
            else
                return grid[i][j1] + grid[i][j2];
        }

        if (dp[i][j1][j2] != -1) {
            return dp[i][j1][j2];
        }

        int maxi = Integer.MIN_VALUE;
      // For the remaining rows, we observe that only the column lies in [-1, 0, +1]
        // and there are 9 possible movements for each cell
        for (int di = -1; di <= 1; di++) {
            for (int dj = -1; dj <= 1; dj++) {
                int ans;
                // If j1 and j2 are the same, add cherry from grid[i][j1] only
                if (j1 == j2)
                    ans = grid[i][j1] + memoizationUtil(i + 1, j1 + di, j2 + dj, n, m, grid, dp);
                else
                    // Add cherry from both j1 and j2
                    ans = grid[i][j1] + grid[i][j2] + memoizationUtil(i + 1, j1 + di, j2 + dj, n, m, grid, dp);
                // Update maxi with the maximum result
                maxi = Math.max(maxi, ans);
            }
        }
        // Return the maximum result
        return dp[i][j1][j2] = maxi;
    }
}
Time Complexity: O(N*M*M) * 9     Reason: At max, there will be N*M*M calls of recursion to solve a new problem and in every call, two nested loops together run for 9 times.
Space Complexity: O(N) + O(N*M*M)    Reason: We are using a recursion stack space: O(N), where N is the path length and an external DP Array of size ‘N*M*M’.

TABULATION::

class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int dp[][][] = new int[n][m][m];
        for (int row1[][] : dp) {
            for (int row2[] : row1) {
                Arrays.fill(row2, -1);
            }
        }

        // base condition

        // for the last row
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                if (j1 == j2)
                    dp[n - 1][j1][j2] = grid[n - 1][j1];
                else
                    dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
            }
        }
   
   //for last to 0th row
        for (int i = n - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {

                    int maxi = Integer.MIN_VALUE;

                    for (int d1 = -1; d1 <= 1; d1++) {
                        for (int d2 = -1; d2 <= 1; d2++) {

                            int ans;
                            if (j1 == j2)
                                ans = grid[i][j1];
                            else
                                ans = grid[i][j1] + grid[i][j2];

                            // Check if the indices are valid
                            if ((j1 + d1 < 0 || j1 + d1 >= m) || (j2 + d2 < 0 || j2 + d2 >= m))
                                ans += (int) Math.pow(-10, 9);
                            else
                                ans += dp[i + 1][j1 + d1][j2 + d2];
                            maxi = Math.max(maxi, ans);
                        }
                    }
                    dp[i][j1][j2] = maxi;
                }
            }
        }
        return dp[0][0][m - 1];

    }
}
Time Complexity: O(N*M*M)*9  Reason: The outer nested loops run for (N*M*M) times and the inner two nested loops run for 9 times.

Space Complexity: O(N*M*M)  Reason: We are using an external array of size ‘N*M*M’. The stack space will be eliminated.
SPACE OPTIMIZATION::

class Solution {
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int cur[][] = new int[m][m];
        int prev[][] = new int[m][m];

        // base condition

        // for the last row
        for (int j1 = 0; j1 < m; j1++) {
            for (int j2 = 0; j2 < m; j2++) {
                if (j1 == j2)
                    prev[j1][j2] = grid[n - 1][j1];
                else
                    prev[j1][j2] = grid[n - 1][j1] + grid[n - 1][j2];
            }
        }

        // for last to 0th row
        for (int i = n - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < m; j1++) {
                for (int j2 = 0; j2 < m; j2++) {

                    int maxi = Integer.MIN_VALUE;

                    for (int d1 = -1; d1 <= 1; d1++) {
                        for (int d2 = -1; d2 <= 1; d2++) {

                            int ans;
                            if (j1 == j2)
                                ans = grid[i][j1];
                            else
                                ans = grid[i][j1] + grid[i][j2];

                            // Check if the indices are valid
                            if (j1 + d1 < 0 || j1 + d1 >= m || j2 + d2 < 0 || j2 + d2 >= m)
                                ans += (int) Math.pow(-10, 9);
                            else
                                ans += prev[j1 + d1][j2 + d2];
                            maxi = Math.max(maxi, ans);
                        }
                    }
                    cur[j1][j2] = maxi;
                }
            }

            // Copy values from cur to prev
            for (int a = 0; a < m; a++) {
                for (int b = 0; b < m; b++) {
                    prev[a][b] = cur[a][b];
                }
            }
        }
        return prev[0][m - 1];
    }
}


Time Complexity: O(N*M*M)*9      Reason: The outer nested loops run for (N*M*M) times and the inner two nested loops run for 9 times.
Space Complexity: O(M*M)     Reason: We are using an external array of size ‘M*M’.
