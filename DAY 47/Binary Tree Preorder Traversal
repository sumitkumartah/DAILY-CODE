144. Binary Tree Preorder Traversal


CODE::(Using recursion)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
   public void preorder(TreeNode root,List<Integer>list){
       if (root==null)  return;
        list.add(root.val);
        preorder(root.left, list);
        preorder(root.right, list);
    }
    
    public List<Integer> preorderTraversal(TreeNode root) {
         List<Integer> ans=new ArrayList<>();
         preorder(root,ans);
        return ans;
    }
}

Time Complexity= O(N)   Reason: We are traversing N nodes and every node is visited exactly once.
Space Complexity= O(N)   Reason: Space is needed for the recursion stack. In the worst case (skewed tree), space complexity can be O(N).




CODE:: (Using Iterative traversal)


class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preorder=new ArrayList<Integer>();  // take a arraylist to store the preorder
        if(root==null) return preorder;
        Stack<TreeNode> st=new Stack<TreeNode>();  //strack input
        st.push(root);  //insert the root element
       while(!st.isEmpty())
        {
            root=st.pop();     //pop the top most element of the stack
            preorder.add(root.val);   //add the pop element in the arraylist
            if(root.right!=null)    //root->right element is not null then push the right element in the stack
            {
                st.push(root.right);  
            }
            if(root.left!=null)  //root->left element is not null then push the left element in the stack
            {
                st.push(root.left);
            }
        }
        return preorder;  // return the arraylist
    }
}

Time Complexity= O(N)    Reason: We are traversing N nodes and every node is visited exactly once.
Space Complexity=O(N)   Reason: In the worst case, (a tree with every node having a single right child and left-subtree, follow the video attached below to see the illustration), the space complexity can be considered as O(N).
