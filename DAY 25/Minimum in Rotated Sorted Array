153. Find Minimum in Rotated Sorted Array


BRUTE ::

class Solution {
    public int findMin(int[] nums) {
        int n=nums.length;
        int min=Integer.MAX_VALUE;  
        for(int i=0;i<n;i++)
        {
          if(nums[i]<min)    //min element of an array
          {
           min=nums[i];
          }
        }
        return min;
    }
}

Time Complexity: O(N), N = size of the given array.
Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).\



OPTIMAL::

class Solution {
    public int findMin(int[] nums) {
        int n=nums.length;
        int ans=Integer.MAX_VALUE;
        int low=0,high=n-1;
        while(low<=high)
        {
          int mid=low+(high-low)/2;
          //if left part is sorted 
          if(nums[low]<=nums[mid])
          {
            ans=Math.min(ans,nums[low]);  //store the minimum  in the ans
            low=mid+1;  //eleminate the left part
          }
          else
          {
            ans=Math.min(ans,nums[mid]);  //store the min in the ans
            high=mid-1;    //eleminate the right part
          }
        }
        return ans;
    }
}

Time Complexity: O(logN), N = size of the given array.
Reason: We are basically using binary search to find the minimum.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).




OPTIMAL 2:: (check a condition: if the whole array is already sorted )

class Solution {
    public int findMin(int[] nums) {
        int n=nums.length;
        int ans=Integer.MAX_VALUE;
        int low=0,high=n-1;
        while(low<=high)
        {
          int mid=low+(high-low)/2;
          
          //if the whole array is already sorted
          if(nums[low]<=nums[high])
          {
            ans=Math.min(ans,nums[low]);
            break;
          }
         
         //if left part is sorted 
          if(nums[low]<=nums[mid])
          {
            ans=Math.min(ans,nums[low]);  //store the minimum  in the ans
            low=mid+1;  //eleminate the left part
          }
          else   //if right part is  sorted
          {
            ans=Math.min(ans,nums[mid]);  //store the min in the ans
            high=mid-1;    //eleminate the right part
          }
        }
        return ans;
    }
}


Time Complexity: O(logN), N = size of the given array.
Space Complexity: O(1)
