
Bottom View of Binary Tree




CODE::


class Solution
{
    class pair
    {
        Node node;
        int hd;
         pair(Node node, int hd)
        {
            this.node=node;
            this.hd=hd;
        }
        
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        ArrayList<Integer> ans = new ArrayList<>(); 
        if(root == null) return ans;
        Map<Integer,Integer> map=new TreeMap<>();
        Queue<pair> q=new LinkedList<pair>();
        q.add(new pair(root,0));
        while(!q.isEmpty())
        {
            pair it=q.remove();
            int hd=it.hd;
            Node tmp=it.node;
            map.put(hd,tmp.data);
            if(tmp.left!=null) q.add(new pair(tmp.left,hd-1));
            if(tmp.right!=null) q.add(new pair(tmp.right,hd+1));
        }
           for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            ans.add(entry.getValue()); 
        }
        return ans; 
    }
}


Time Complexity=O(N)
Space Complexity=O(N)
