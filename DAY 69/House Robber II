213. House Robber II


MEMOIZATION::

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        List<Integer> arr1 = new ArrayList<>();
        List<Integer> arr2 = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (i != 0) arr1.add(nums[i]);
            if (i != n - 1) arr2.add(nums[i]);
        }

        int dp1[] = new int[n];
        int dp2[] = new int[n];
        Arrays.fill(dp1, -1);
        Arrays.fill(dp2, -1);

        int result1 = robber2(arr1, arr1.size() - 1, dp1);
        int result2 = robber2(arr2, arr2.size() - 1, dp2);

        return Math.max(result1, result2);
    }

    private static int robber2(List<Integer> arr, int n, int dp[]) {
        if (n == 0) return arr.get(0);
        if (dp[n] != -1) return dp[n];

        int pick = arr.get(n) ;
        if(n>1)
         pick+=robber2(arr, n - 2, dp);
        int nopick = robber2(arr, n - 1, dp);
        return dp[n] = Math.max(pick, nopick);
    }
}



TABULIZATION::

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        List<Integer> arr1 = new ArrayList<>();
        List<Integer> arr2 = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (i != 0) arr1.add(nums[i]);
            if (i != n - 1) arr2.add(nums[i]);
        }

        int dp1[] = new int[n];
        int dp2[] = new int[n];
        Arrays.fill(dp1, -1);
        Arrays.fill(dp2, -1);

        int result1 = robber2(arr1, arr1.size() , dp1);
        int result2 = robber2(arr2, arr2.size(), dp2);

        return Math.max(result1, result2);
    }

    private static int robber2(List<Integer> arr, int n, int dp[]) {
       dp[0]=arr.get(0);
       for(int i=1;i<n;i++){
         int pick = arr.get(i) ;
         if(i>1)
          pick+=dp[i-2];
        int nopick = dp[i-1];
        dp[i] = Math.max(pick, nopick);
       }
       return dp[n-1];
    }
}

SPACE OPTIMIZATION::

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        List<Integer> arr1 = new ArrayList<>();
        List<Integer> arr2 = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (i != 0) arr1.add(nums[i]);
            if (i != n - 1) arr2.add(nums[i]);
        }

        int result1 = robber2(arr1, arr1.size() );
        int result2 = robber2(arr2, arr2.size());

        return Math.max(result1, result2);
    }

    private static int robber2(List<Integer> arr, int n) {
       int prev=arr.get(0);
       int prev2=0;
       for(int i=1;i<n;i++)
       {
           int take=arr.get(i);
           if(i>1)
             take+=prev2;
           int notake=prev;
           int cur=Math.max(take,notake);
           prev2=prev;
           prev=cur;
       }
       return prev;
    }
}
