70. Climbing Stairs


MEMOIZATION::


class Solution {
    public int climbStairs(int n) {
     
        int dp[]=new int[n+1];
       Arrays.fill(dp,-1);
        dp[0]= 1;
        dp[1]= 1;
  
       for(int i=2; i<=n; i++){
      dp[i] = dp[i-1]+ dp[i-2];
       }
      return dp[n];
    }
}



TAULATION::


class Solution {
    public int climbStairs(int n) {
       
        int dp[]=new int [n+1];
        Arrays.fill(dp,-1);
        return step(n+1, dp);
    }

    public static int step(int n, int dp[])
    {
          dp[0]=1;
          dp[1]=1;
         for(int i=2;i<n;i++){
         dp[i]=dp[i-1]+dp[i-2];
         }
         return dp[n-1];
    }
}



Space OPtimization::


class Solution {
    public int climbStairs(int n) {
        int n1=1;
        int n2=1;
        for(int i=2;i<=n;i++)
        {
            int n3=n1+n2;
            n1=n2;
            n2=n3;
        }
        return n2;
    }
}
