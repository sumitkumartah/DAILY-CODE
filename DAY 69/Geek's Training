Geek's Training


MEMOIZATION::



class Solution{
    public int maximumPoints(int points[][],int N){
        int dp[][]=new int [N][4];
        for(int row[]: dp)
        {
            Arrays.fill(row,-1);
        }
        return maxpoints(points, N-1, 3, dp);
    }
    
    private static  int maxpoints(int point[][], int day, int last, int dp[][])
    {
        if(dp[day][last]!=-1) return dp[day][last];
        
        //only for the day zero
        if(day==0)
        {
            int maxi=0;
            for(int i=0;i<=2;i++)
            {
                if(i!=last)
                maxi=Math.max(maxi, point[0][i]);
            }
            return maxi;
        }
        
        
        //for remaining days
        
        int maxi=0;
        for(int task=0;task<=2;task++)
        {
            if(task!=last){
              int activity=point[day][task]+maxpoints(point, day-1, task, dp);
              maxi=Math.max(maxi, activity);
            }
        }
        return dp[day][last]=maxi;
    }
}


TIME COMPLEXITY=O(N*4) *3   //THERE IS N*4 STEPS AND FOR EVERY STEP YOU ALSO RUN A LOOP FOR SIZE 3

SPACE COMPLEXITY== O(N) + O(N*4)


TABULIZATION::


class Solution {
    public int maximumPoints(int points[][], int N) {
       
        int dp[][] = new int[N][4];
        
        dp[0][0] = Math.max(points[0][1] , points[0][2]);
        dp[0][1] = Math.max(points[0][0] , points[0][2]);
        dp[0][2] = Math.max(points[0][1] , points[0][0]);
        dp[0][3] = Math.max(points[0][0] , Math.max(points[0][1] , points[0][2]));
        
        for(int day = 1 ; day < N ; day++){
            for(int last = 0 ; last < 4 ; last++){
                
                dp[day][last] = 0 ; 
                
                for(int task = 0 ; task <= 2 ; task++){
                    
                    if(task != last){
                        
                    int point = points[day][task] + dp[day-1][task];
                    dp[day][last] =  Math.max(dp[day][last] , point); 
                    }
                }
            }
        }
        
        return dp[N-1][3];
    }
}


TC=O(N*4*3)
SC=O(N*4)

Space optimization::

class Solution{
    public int maximumPoints(int points[][],int N){
      int prev[]=new int [4];
       
       //for the day 0
      prev[0]=Math.max(points[0][1],points[0][2]);
      prev[1]=Math.max(points[0][0],points[0][2]);
      prev[2]=Math.max(points[0][0],points[0][1]);
      prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

      
      //for the remaining days
      for(int day=1;day<N;day++)
      {
          int temp[]=new int[4];
          for(int last=0;last<4;last++)
          {
              temp[last]=0;
              for(int task=0;task<=2;task++)
              {
                  if(task!=last){
                    temp[last]=Math.max(temp[last], points[day][task]+prev[task]);
                  }
              }
          }
          prev=temp;
      }
      
      return prev[3];
    }
}


TC=O(N*4*3)
SC=O(4)

