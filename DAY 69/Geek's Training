Geek's Training


MEMOIZATION::



class Solution{
    public int maximumPoints(int points[][],int N){
        int dp[][]=new int [N][4];
        for(int row[]:dp)
        {
            Arrays.fill(row,-1);
        }
        
        return maxpoints(points, N-1,3, dp);
    }
    private static int maxpoints(int points[][], int day, int last, int dp[][])
    {
        if(dp[day][last]!=-1)return dp[day][last];
        
        // for base case only for the day 0
        if(day==0)
        {
            int maxi=0;
            for(int i=0;i<=2;i++)
            {
                if(i!=last)
                  maxi=Math.max(maxi,points[0][i]);
            }
            return maxi;
        }
        
        //for the remaining day
        int maxi=0;
        for(int i=0;i<=2;i++) // Iterate all the rows of every day
        {
            if(i!=last)
            {
                int activity=points[day][i]+maxpoints(points,day-1,i,dp);
                maxi=Math.max(maxi,activity);
            }
        }
        return dp[day][last]=maxi;
    }
    
}


TIME COMPLEXITY=O(N*4) *3   //THERE IS N*4 STEPS AND FOR EVERY STEP YOU ALSO RUN A LOOP FOR SIZE 3

SPACE COMPLEXITY== O(N) + O(N*4)
