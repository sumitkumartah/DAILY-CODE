K-th Element of two sorted arrays


import java.util.ArrayList;

public class Solution {
    public static int kthElement(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int n, int m, int k) {
        // Ensure that arr1 is the smaller array to simplify the algorithm
        if (n > m)
            return kthElement(arr2, arr1, m, n, k);

        // Define the search range for binary search
        int low = Math.max(0, k - m);
        int high = Math.min(n, k);

        while (low <= high) {
            int mid1 = (low + high) / 2;
            int mid2 = k - mid1;

            int l1 = (mid1 > 0) ? arr1.get(mid1 - 1) : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? arr2.get(mid2 - 1) : Integer.MIN_VALUE;
            int r1 = (mid1 < n) ? arr1.get(mid1) : Integer.MAX_VALUE;
            int r2 = (mid2 < m) ? arr2.get(mid2) : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                // The median is between l1 and l2, return the maximum of them
                return Math.max(l1, l2);
            } else if (l1 > r2) {
                // Adjust the binary search range
                high = mid1 - 1;
            } else {
                low = mid1 + 1;
            }
        }
        return -1; // If no kth element is found
    }
}



Time Complexity : log(min(m,n))

Space Complexity: O(1)
