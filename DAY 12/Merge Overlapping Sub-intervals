Merge Overlapping Sub-intervals


BRUTE::


class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int a[], int b[]) {
                return a[0]-b[0];
            }
        });
        List<List<Integer>> ans = new ArrayList<>();
        for (int i=0; i<n; i++) {
            if (ans.size()==0 || ans.get(ans.size()-1).get(1) < intervals[i][0]) {
                ans.add(Arrays.asList(intervals[i][0],intervals[i][1]));
            }
            else {
                ans.get(ans.size()-1).set(1, Math.max(ans.get(ans.size()-1).get(1), intervals[i][1]));
            }
        }
        int sol[][] = new int[ans.size()][2];
        for (int i=0; i<ans.size(); i++) {
            sol[i][0] = ans.get(i).get(0);
            sol[i][1] = ans.get(i).get(1);
        }
        return sol;
    }
}


Time Complexity: O(N*logN) + O(N), where N = the size of the given array.
Reason: Sorting the given array takes  O(N*logN) time complexity. Now, after that, we are just using a single loop that runs for N times. So, the time complexity will be O(N).

Space Complexity: O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.
