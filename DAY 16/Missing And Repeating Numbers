Missing And Repeating Numbers



import java.util.*;
public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
       int n=a.length;
       int missing=-1;
       int repeating=-1;
       for(int i=1;i<=n;i++)
       {
           int cnt=0;
           for(int j=0;j<n;j++)
           {
               if(a[j]==i)
               {
                   cnt++;
               }
           }
           if(cnt==0) missing=i;
           if(cnt==2) repeating=i;

           if(missing!=-1 && repeating!=-1)
           {
               break;
           }
       }
       int ans[]={repeating,missing};
       return ans;
    }
}


Time Complexity: O(N2), where N = size of the given array.
Reason: Here, we are using nested loops to count occurrences of every element between 1 to N.

Space Complexity: O(1) as we are not using any extra space.



BETTER::


public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
       int n=a.length;
       int hash[]=new int[n+1];
       int repeating=-1;
       int missing=-1;
       for(int i=0;i<n;i++)
       {
           hash[a[i]]++;
       }
       for(int i=1;i<=n;i++)
       {
          if (hash[i] == 2) repeating = i;
          else if (hash[i] == 0) missing = i;
            
            if(missing!=-1 && repeating!=-1)
            {
                break;
            }
       }
       int ans[]={repeating,missing};
       return ans;
    
    }
}


Time Complexity: O(2N), where N = the size of the given array.
Reason: We are using two loops each running for N times. So, the time complexity will be O(2N).

Space Complexity: O(N) as we are using a hash array to solve this problem.


OPTIMAL::

public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
       long n=a.length;
       long s=(n*(n+1))/2;
        long s2 = (n * (n + 1) * (2 * n + 1)) / 6; 
       long sn=0;
       long s2n=0;
       for(int i=0;i<n;i++)
       {
           sn+=a[i];
           s2n+=((long)a[i]*(long)a[i]);
       }
       long val1=s-sn;
       long val2=s2-s2n;
       
       val2=val2/val1;
       long x=(val1+val2)/2;
       long y=x-val1;
       int ans[]={(int)y,(int)x};
       return ans;
       
    }
}

Time Complexity: O(N), where N = the size of the given array.
Reason: We are using only one loop running for N times. So, the time complexity will be O(N).

Space Complexity: O(1) as we are not using any extra space to solve this problem.



