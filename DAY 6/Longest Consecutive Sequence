128. Longest Consecutive Sequence

BRUTE:: cross


class Solution {
    public int longestConsecutive(int[] nums) {
            int largest=1;
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            int x=nums[i];
            int cnt=1;
            if(linearsearch(nums,x+1)==true)
            {
                cnt++;
                x=x+1;
            }
            largest=Math.max(largest,cnt);
        }
        return largest;
    }
    public static boolean linearsearch(int []arr,int num)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]==num)
            {
                return true;
            }
           
        }
        return false;
        
    }
}

Time Complexity: O(N2), N = size of the given array.
Reason: We are using nested loops each running for approximately N times.

Space Complexity: O(1), as we are not using any extra space to solve this problem.



BETTER::

class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        Arrays.sort(nums);
        int cnt=0;
        int longest=1;
        int lastsmaller = Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            if(nums[i]-1==lastsmaller)
            {
                cnt++;
                lastsmaller=nums[i];
            }
            else if(nums[i]!=lastsmaller)
            {
                cnt=1;
                lastsmaller=nums[i];
            }
            longest=Math.max(longest,cnt);
        }
        return longest;
        
    }
}

 Time Complexity: O(NlogN) + O(N), N = size of the given array.
Space Complexity: O(1), as we are not using any extra space to solve this problem.


OPTIMAL::

class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        if (n==0) return 0;
        HashSet<Integer> set=new HashSet <>();
        int longest=Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++)
        {
            set.add(nums[i]);

        }
        for(int it: set)
        {
            if(!set.contains(it-1))
            {
                int cnt=1;
                int x=it;
            
            while(set.contains(x+1))
            {
                cnt++;
                x++;
            }
            longest=Math.max(longest,cnt);
            }
           
        }
        return longest;
        
    }
}  


Time Complexity: O(N) + O(2*N) ~ O(3*N), where N = size of the array.

Space Complexity: O(N), as we are using the set data structure to solve this problem.

