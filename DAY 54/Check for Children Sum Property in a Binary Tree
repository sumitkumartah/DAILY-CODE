Check for Children Sum Property in a Binary Tree



1.  Children Sum Property   (code studio)

Problem Statement
Send feedback
Return true if all non-leaf nodes in a given binary tree have a value that is equal to the sum of their child nodes, otherwise return false..
For Example:

Explanation: Node 2 and 3 are children of Node 1 and (3+1)=4.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
5 3 2 3 -1 -1 -1 -1 -1
Sample Output 1:
true



CODE::


public class Solution {
    public static boolean isParentSum(Node root) {
       if (root==null || (root.left==null && root.right== null)) return true;
       int child=0;
       if(root.left!=null) child+=root.left.data;
       if (root.right != null) child += root.right.data;
       if(child==root.data)
       {
           return isParentSum(root.left) && isParentSum(root.right);
       }
       else
       {
           return false;
       }
    }
}

Time Complexity=O(N)
Space Complexity=O(N)










2.  Check for Children Sum Property in a Binary Tree

Problem Statement: Children Sum Property in a Binary Tree. Write a program that converts any binary tree to one that follows the children sum property.
The children sum property is defined as, For every node of the tree, the value of a node is equal to the sum of values of its children(left child and right child).

Note: 

The node values can be increased by 1 any number of times but decrement of any node value is not allowed.
A value for a NULL node can be assumed as 0.
You are not allowed to change the structure of the given binary tree.


import java.util.*;

class Node {
  int data;
  Node left, right;

  Node(int data) {
    this.data = data;
    left = null;
    right = null;
  }
}

class TUF {
  static void reorder(Node root) {
    if(root==null )return ;
    int child=0;
    if(root.left!=null)child+=root.left.data;
    if(root.right!=null)child+=root.right.data;
    if(child<root.data)
   {
      if(root.left!=null) root.left.data=root.data;
      if(root.right!=null) root.right.data=root.data;
   }
   reorder(root.left);
   reorder(root.right);
   
   // backtracking
   
   int tot=0;
   if(root.left!=null)tot+=root.left.data;
   if(root.right!=null)tot+=root.right.data;
    if(root . left!=null || root . right!=null) root . data = tot;
  }

  static void changeTree(Node root) {
    // Change this to print the result
    System.out.println("Before:");
    printTree(root);
    reorder(root);
    System.out.println("After:");
    printTree(root);
  }

  // Helper method to print the tree
  static void printTree(Node root) {
    if (root == null) return;
    printTree(root.left);
    System.out.print(root.data + " ");
    printTree(root.right);
  }

  public static void main(String args[]) {

    Node root = new Node(2);
    root.left = new Node(35);
    root.left.left = new Node(2);
    root.left.right = new Node(3);
    root.right = new Node(10);
    root.right.left = new Node(5);
    root.right.right = new Node(2);

    changeTree(root);

  }
}


Time Complexity=O(N)
Space Complexity=O(N)



