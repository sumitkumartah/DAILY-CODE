//Sort an array of 0's 1's and 2's


BRUTE::
 Simple sort the array with any sorting algorithm

BETTER::

class Solution {
    public void sortColors(int[] nums) {
        int cnt1=0;
        int cnt0=0;
        int cnt2=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==0) cnt0++;
            if(nums[i]==1) cnt1++;
            if(nums[i]==2) cnt2++;

        }
        for(int i=0;i<cnt0;i++)
        {
            nums[i]=0;
        }
        for(int i=cnt0;i<cnt1+cnt0;i++)
        {
            nums[i]=1;
        }
        for(int i=cnt1+cnt0;i<nums.length;i++)
        {
            nums[i]=2;
        }
    }
}

Time Complexity: O(N) + O(N), where N = size of the array. First O(N) for counting the number of 0’s, 1’s, 2’s, and second O(N) for placing them correctly in the original array.

Space Complexity: O(1) as we are not using any extra space.



OPTIMAL::

class Solution {
    public void sortColors(int[] nums) {
        int mid = 0;
        int low = 0;
        int high = nums.length - 1;
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low, mid);
                low++;
                mid++;
                
            } else if (nums[mid] == 1) {
                mid++;
            } else  {
                swap(nums, mid, high);
                high--;
            }
        }
    }

    static void swap(int arr[],int a,int b){
        int temp=arr[a];
        arr[a]=arr[b];
        arr[b]=temp;
    }
}


Time Complexity: O(N), where N = size of the given array.
Reason: We are using a single loop that can run at most N times.

Space Complexity: O(1) as we are not using any extra space.
