162. Find Peak Element


BRUTE::

class Solution {
    public int findPeakElement(int[] nums) {
        int n=nums.length;
       for(int i=0;i<n;i++)
       {
          if((i==0 || nums[i-1]<nums[i]) && (i==n-1 || nums[i]>nums[i+1]))
           {
               return i;
           }
       }
       return -1;
    }
}


Time Complexity: O(N), N = size of the given array.
Space Complexity: O(1)


OPTIMAL::

class Solution {
    public int findPeakElement(int[] nums) {
        int n=nums.length;

        //if array has only one element
        if(n==1) return 0;
       
       //if array is sorted in decending order
       if(nums[0]>nums[1]) return 0;

       //if array is sorted in assending order
       if(nums[n-1]>nums[n-2]) return n-1;
       
       int low=1;
       int high=n-2;
       while(low<=high)
       {
           int mid=low+(high-low)/2;
           //if mid element is the peak element
           if(nums[mid-1]<nums[mid]  && nums[mid]>nums[mid+1])
           {
               return mid;
           }
           if(nums[mid-1]<nums[mid])  //if mid is in incresing slope
           {
               low=mid+1;
           }
           else   //if mid is in decreasing slope 
            {      // or mid is in between increasing and decreasing slope
               high=mid-1;
            }
       }
       return -1;
    }
}

Time Complexity: O(logN), N = size of the given array.
Space Complexity: O(1)
