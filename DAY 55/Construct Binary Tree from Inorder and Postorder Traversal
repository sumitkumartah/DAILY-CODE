106. Construct Binary Tree from Inorder and Postorder Traversal


OPTIMAL CODE : 

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
      Map <Integer, Integer> mpp=new HashMap<>();  // take a hashmap
      for(int i=0;i<inorder.length;i++)
      {
          mpp.put(inorder[i], i);  // iunsert all the elements on the map
      }  
      return Treee(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1, mpp);   // recursive call
    }

    public TreeNode Treee(int []inorder, int is, int ie, int []postorder, int ps,int pe, Map<Integer, Integer> mpp)
    {
        if(is>ie || ps>pe) return null;   // if no postorder and inorder
        TreeNode root= new TreeNode(postorder[pe]);   // set the rootnode as postorder last node
        int inroot=mpp.get(root.val);   // find out the root node in inorder by searching in the map
        int numsleft=inroot-is;  // figre out the elements in the left of the root in the inorder

        root.left=Treee(inorder, is, inroot-1, postorder, ps, ps+numsleft-1, mpp); // figre out the left preoder and inorder
        root.right=Treee(inorder, inroot+1, ie, postorder, ps+numsleft, pe-1, mpp);// figre out the right preorder and inorder
        return root;
    }
}


TIME COMPLEXITY :  O(N)
SPACE COMPLEXITY: O(N)
