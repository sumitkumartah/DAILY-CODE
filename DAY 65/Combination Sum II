40. Combination Sum II
CODE::

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> ans=new ArrayList<>();
        combination(candidates, target, 0, ans, new ArrayList<>());
        return ans;
    }

    private void combination(int  arr[], int tar, int ind,  List<List<Integer>> ans, List<Integer> ls)
    {
        //base case
        if(tar==0)
        {
          ans.add(new ArrayList<>(ls));
          return;
        }
        // for every index i check
        for(int i=ind; i<arr.length; i++)
        {
            if(i>ind && arr[i]==arr[i-1]) // if here is repeted element
            {
                continue;
            }
            if(arr[i]> tar) break;
            ls.add(arr[i]);
            combination(arr, tar-arr[i], i+1, ans, ls);
            ls.remove(ls.size()-1);  //for backtracking
        }

    }
}
