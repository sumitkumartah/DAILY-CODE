116. Populating Next Right Pointers in Each Node

CODE::

class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return null;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size(); // Store the size of the current level

            for (int i = 0; i < size; i++) {
                Node node = queue.remove(); // Remove a node from the queue

                if (i < size - 1) {
                    node.next = queue.peek(); // Set the next pointer to the node at the front of the queue
                }

                if (node.left != null) {
                    queue.add(node.left); // Add the left child to the queue
                }
                if (node.right != null) {
                    queue.add(node.right); // Add the right child to the queue
                }
            }
        }

        return root; // Return the modified root node
    }
}


TC=O(N)
SC=O(N)
