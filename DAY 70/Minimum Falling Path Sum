931. Minimum Falling Path Sum



MEMOIZATION::



class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        
        int dp[][]=new int [m][n];
        for(int row[]: dp){
            Arrays.fill(row,-1);
        }
        int min=Integer.MAX_VALUE;
        for(int j=0;j<n;j++)
        {
            min=Math.min(min,minpath(m-1,j,n,matrix,dp));
        }
        return min;
    }

    private static int minpath(int i,int j, int n,int matrix[][],int dp[][])
    {
        //base condition if in the left or right diagonal exceeds
        if(j<0 || j>=n)return (int)1e9;
        //if i am at the first row 
        if(i==0) return matrix[0][j];

        // if there are overlappinf subproblem
        if(dp[i][j]!=-1)return dp[i][j];

        int up=matrix[i][j]+ minpath(i-1,j,n,matrix,dp);
        int leftdg=matrix[i][j]+ minpath(i-1,j-1,n,matrix,dp);
        int rightdg=matrix[i][j]+ minpath(i-1,j+1,n,matrix,dp);
        return dp[i][j]=Math.min(up,Math.min(leftdg,rightdg));
    }
}

Time Complexity: O(N*N)  Reason: At max, there will be M*N calls of recursion to solve a new problem,
Space Complexity: O(N) + O(N*M)  Reason: We are using a recursion stack space: O(N), where N is the path length and an external DP Array of size ‘N*M’.




TABULATION::


class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        
        int dp[][]=new int [m][n];
        for(int row[]: dp){
            Arrays.fill(row,-1);
        }
        //for the first row
        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j];
        }
       
         //for the remaining rows
         for(int i=1;i<m;i++)
         {
             for(int j=0;j<n;j++){
               int up=matrix[i][j]+ dp[i-1][j];
                int leftdg=matrix[i][j];
                if(j-1>=0)
                   leftdg+=dp[i-1][j-1];
                else
                   leftdg+=(int)1e9;
                int rightdg=matrix[i][j];
                if(j+1<m)
                    rightdg+=dp[i-1][j+1];
                else
                   rightdg+=(int)1e9;
                dp[i][j]=Math.min(up,Math.min(leftdg,rightdg));
             }
         }
         int min=Integer.MAX_VALUE;
        for(int j=0;j<n;j++)
        {
           min=Math.min(min,dp[m-1][j]);
        }
        return min;
    }
}


Time Complexity: O(N*M)  Reason: There are two nested loops
Space Complexity: O(N*M)  Reason: We are using an external array of size ‘N*M’. The stack space will be eliminated.


SPACE OPTIMIZATION::

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        int[] cur = new int[n];
        int[] prev = new int[n];

        // For the first row
        for (int j = 0; j < n; j++) {
            prev[j] = matrix[0][j];
        }

        // For the remaining rows
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int up = matrix[i][j] + prev[j];
                int leftdg = matrix[i][j];
                if (j - 1 >= 0)
                    leftdg += prev[j - 1];
                else
                    leftdg += 1e9;
                int rightdg = matrix[i][j];
                if (j + 1 < n)
                    rightdg += prev[j + 1];
                else
                    rightdg += 1e9;
                cur[j] = Math.min(up, Math.min(leftdg, rightdg));
            }
            // Copy cur to prev for the next iteration
            System.arraycopy(cur, 0, prev, 0, n);
        }

        int min = Integer.MAX_VALUE;
        // Find the minimum value in the last row (prev array)
        for (int j = 0; j < n; j++) {
            min = Math.min(min, prev[j]);
        }
        return min;
    }
}


Time Complexity: O(N*M) Reason: There are two nested loops

Space Complexity: O(M) Reason: We are using an external array of size ‘M’ to store only one row.

