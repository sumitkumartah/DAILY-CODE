217. Contains Duplicate


BRUTE::
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j])
                    return true;
            }
        }
        return false;
    }
};

Time Complexity: O(N ^2)
Space Complexity:O(1)




BETTER::

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1])
                return true;
        }
        return false;
    }
}

Time Complexity: O(N *logN)
Space Complexity:O(1)




OPTIMAL 1::


class Solution {
    public boolean containsDuplicate(int[] nums) {
       Set<Integer> set=new HashSet<>();
       for(int i=0;i<nums.length;i++)
       {
           
           if(set.contains(nums[i]))
           {
               return true;
           }
           set.add(nums[i]);
       }
       return false;
    }
}

Time Complexity: O(N )
Space Complexity:O(N)    N is the size of the hashset



OPTIMAL 2::

class Solution {
    public boolean containsDuplicate(int[] nums) {
       int n=nums.length;
       Map<Integer,Integer> mpp=new HashMap<>();
       for(int num: nums)
       {
           if(mpp.containsKey(num))
           {
               return true;
           }
           int value=mpp.getOrDefault(num,0);
           mpp.put(num,value+1);
       } 
       return false;
    }
}

Time Complexity: O(N)
Space Complexity:O(N)    N is the size of the hahmap
