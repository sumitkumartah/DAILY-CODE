51. N-Queens




CODE::

class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board.length;j++)
            {
                board[i][j]='.';
            }
        }
        List<List<String>> ans=new ArrayList<>();
        solve(0,board,ans);
        return ans;
    }


    private void solve(int col, char [][]board, List<List<String>> ans)
    {
        if(col==board.length){
            ans.add(construct(board));
            return;
        }
        for(int row=0; row<board.length;row++)
        {
            if(issafe(board, row, col))
            {
                board[row][col]='Q';
                solve(col+1, board, ans);
                 board[row][col]='.';
            }
        }
    }


    //construct the board ans store the ans
    private List<String> construct(char board[][])
    {
        List<String> res = new ArrayList<>();
        for(int i=0;i<board.length;i++)
        {
            String row=new String(board[i]);
            res.add(row);
        }
        return res;
    }

     private boolean issafe(char board[][], int row, int col)
     {
         //for bottom diagonal
         int duprow=row;
         int dupcol=col;
        while(row>=0 && col>=0)
        {
            if(board[row][col]=='Q') return false;
            row--;
            col--;
        }

        //for right 
         row=duprow;
         col=dupcol;
        while(col>=0)
        {
            if(board[row][col]=='Q') return false;
            col--;
        }

        //for bottom diagonal
        
         row=duprow;
         col=dupcol;
        while(row<board.length && col>=0)
        {
            if(board[row][col]=='Q') return false;
            row++;
            col--;
        }
        return true;
       
    }
}
