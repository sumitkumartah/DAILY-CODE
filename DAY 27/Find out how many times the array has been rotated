Find out how many times the array has been rotated


BRUTE::

public class Solution {
    public static int findKRotation(int []arr){
       int n=arr.length;
       int ans=Integer.MAX_VALUE;
       int index=-1;
       for(int i=0;i<n;i++)
       {
           if(arr[i]<ans)
           {
               ans=arr[i];
               index=i;
           }
       }
       return index;
    }
}

Time Complexity: O(N)
Space Complexity: O(1)



OPTIMAL::

public class Solution {
    public static int findKRotation(int []arr){
        int n=arr.length;
        int low=0;
        int high=n-1;
        int ans=Integer.MAX_VALUE;
        int index=-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            
            //if whole array is sorted
            if(arr[low]<=arr[high])
            {
                if(arr[low]<ans)
                {
                    index=low;
                    ans=arr[low];
                    
                }
                break;
            }

            //if left part is sorted
            if(arr[low]<=arr[mid])
            {
               if(arr[low]<ans)
                {
                    index=low;
                    ans=arr[low];
                }
                low=mid+1;   //eleminate the left part
            }

            //if right part is sorted
            else
            {
                if(arr[mid]<ans)
                {
                     index=mid;
                    ans=arr[mid];
                }
                high=mid-1; //eleminate the right part
            }
        }
        return index;
    }
}

Time Complexity: O(logN), N = size of the given array.
Space Complexity: O(1)
