240. Search a 2D Matrix II


BRUTE::





BETTER::


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i=0;i<n;i++)
        {
            if(matrix[i][0]<=target  && target<=matrix[i][m-1])
            {
             if (findelement(matrix[i], target)) { 
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean findelement(int arr[],int x)
    {
      int m=arr.length;
      int low=0;
      int high=m-1;
      while(low<=high)
      {
        int mid=(low+high)/2;
        if(arr[mid]==x)
        {
          return true;
        }
        else if(arr[mid]>x)
        {
          high=mid-1;
        }
        else
        {
          low=mid+1;
        }
      }
      return false;
    }
}


Time Complexity: O(N*logM), where N = given row number, M = given column number.

Space Complexity: O(1) as we are not using any extra space.



OPTIMAL::



class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        int row=0;
        int col=m-1;
         while (row < n && col >= 0)
        {
            if(matrix[row][col]==target)
            {
                return true;
            }
            else if(matrix[row][col]<target)
            {
                row++;
            }
            else
            {
                col--;
            }
        }
        return false;
}
}


Time Complexity: O(N+M), where N = given row number, M = given column number.
Reason: We are starting traversal from (0, M-1), and at most, we can end up being in the cell (M-1, 0). So, the total distance can be at most (N+M). So, the time complexity is O(N+M).

Space Complexity: O(1) as we are not using any extra space.
