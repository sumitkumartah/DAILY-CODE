74. Search a 2D Matrix



BRUTE::


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==target)
                {
                    return true;
                }
            }
        }
        return false;
    }
}

Time Complexity: O(N X M), where N = given row number, M = given column number.

Space Complexity: O(1) as we are not using any extra space.






BETTER::



class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i=0;i<n;i++)
        {
            if(matrix[i][0]<=target  && target<=matrix[i][m-1])
            {
             if (findelement(matrix[i], target)) { 
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean findelement(int arr[],int x)
    {
      int m=arr.length;
      int low=0;
      int high=m-1;
      while(low<=high)
      {
        int mid=(low+high)/2;
        if(arr[mid]==x)
        {
          return true;
        }
        else if(arr[mid]>x)
        {
          high=mid-1;
        }
        else
        {
          low=mid+1;
        }
      }
      return false;
    }
}



Time Complexity: O(N + logM), where N = given row number, M = given column number.

Space Complexity: O(1) as we are not using any extra space.




OPTIMAL:::



class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int low = 0;
        int high = n * m - 1; 
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int row = mid / m;
            int col = mid % m;
            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return false;
    }
}



Time Complexity: O(log(NxM)), where N = given row number, M = given column number.

Space Complexity: O(1) as we are not using any extra space
