Left and Right Sum Differences


BRUTE::


class Solution {
    public int[] leftRightDifference(int[] nums) {
        int n = nums.length;
        int sum = 0;
        int[] temp1 = new int[n];
        
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            temp1[i] = sum;
        }

        sum = 0;  
        int[] temp2 = new int[n];
        
        for (int i = n - 1; i >= 0; i--) {
            sum += nums[i];
            temp2[i] = sum;
        }
        
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = Math.abs(temp1[i] - temp2[i]);
        }
        
        return ans;
    }
}


Time Complexity: O(3N)
Space Complexity: O(3N)



OPTIMAL::


class Solution {
    public int[] leftRightDifference(int[] nums) {
        int leftSum = 0, rightSum = 0;  // Initialize the left and right cumulative sums
        
      
         for (int i = 0; i < nums.length; i++) {       // Calculate the initial sum of all elements in the array
            rightSum += nums[i];
        }
        
        // Calculate the absolute difference for each element
        for (int i = 0; i < nums.length; i++) {
            leftSum += nums[i];          // Increment the left cumulative sum
            rightSum -= nums[i];         // Decrement the right cumulative sum
            nums[i] = Math.abs((leftSum - nums[i]) - rightSum);  // Calculate the absolute difference
        } 
        
        return nums;  // Return the modified array with absolute differences
    }
}


Time Complexity: O(2N)
Space Complexity: O(1)
